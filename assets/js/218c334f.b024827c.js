"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[7203],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),b=l(n),m=i,d=b["".concat(s,".").concat(m)]||b[m]||p[m]||r;return n?o.createElement(d,a(a({ref:t},c),{},{components:n})):o.createElement(d,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=b;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var l=2;l<r;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},8138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>l});var o=n(7896),i=(n(2784),n(876));const r={sidebar_position:9},a="Pub/Sub with `handleInfo`",u={unversionedId:"anatomy-of-a-liveview/handle-info-pub-sub",id:"anatomy-of-a-liveview/handle-info-pub-sub",title:"Pub/Sub with `handleInfo`",description:"Pub/Sub is a common pattern for decoupling processes by allowing messages to be sent to a topic by one process and",source:"@site/docs/03-anatomy-of-a-liveview/handle-info-pub-sub.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/handle-info-pub-sub",permalink:"/docs/anatomy-of-a-liveview/handle-info-pub-sub",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Background Task with `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info-background-task"},next:{title:"LiveViewSocket",permalink:"/docs/category/liveviewsocket"}},s={},l=[{value:"Example Pub/Sub LiveView",id:"example-pubsub-liveview",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"It&#39;s that easy!",id:"its-that-easy",level:2}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pubsub-with-handleinfo"},"Pub/Sub with ",(0,i.kt)("inlineCode",{parentName:"h1"},"handleInfo")),(0,i.kt)("p",null,"Pub/Sub is a common pattern for decoupling processes by allowing messages to be sent to a topic by one process and\nreceived asynchronously by another. ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," (and Phoenix LiveView, for that matter) are built on top of Pub/Sub,\nand Pub/Sub is what enables building the real-time, multi-player features with such ease (along with the LiveView\nprogramming model). We will go into more ",(0,i.kt)("a",{parentName:"p",href:"/docs/category/real-time--multi-player"},"detail on Pub/Sub")," in the Real-Time\nMulti-Player docs."),(0,i.kt)("h2",{id:"example-pubsub-liveview"},"Example Pub/Sub LiveView"),(0,i.kt)("p",null,"We're going to extend our counter example to use Pub/Sub, which will make it a real-time, multi-player counter. Here is\nthe code with the Pub/Sub changes highlighted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="realtimeCounterLiveView.ts" {3-6,14,17-20,27-28,31-32,36-40}',title:'"realtimeCounterLiveView.ts"',"{3-6,14,17-20,27-28,31-32,36-40}":!0},'import { createLiveView, html, SingleProcessPubSub } from "liveviewjs";\n\n// An in-memory count simulating state outside of the LiveView\nlet count = 0;\n// Use a single process pub/sub implementation (for simplicity)\nconst pubSub = new SingleProcessPubSub();\n\n/**\n * A basic counter that increments and decrements a number.\n */\nexport const rtCounterLiveView = createLiveView<\n  { count: number }, // Define LiveView Context / State\n  { type: "increment" } | { type: "decrement" }, // Define LiveView Events\n  { type: "counter"; count: number } // Define LiveView Info messages\n>({\n  mount: (socket) => {\n    // init state, set count to current count\n    socket.assign({ count });\n    // subscribe to counter events\n    socket.subscribe("counter");\n  },\n  handleEvent: (event, socket) => {\n    // handle increment and decrement events\n    const { count } = socket.context;\n    switch (event.type) {\n      case "increment":\n        // broadcast the new count\n        pubSub.broadcast("counter", { count: count + 1 });\n        break;\n      case "decrement":\n        // broadcast the new count\n        pubSub.broadcast("counter", { count: count - 1 });\n        break;\n    }\n  },\n  handleInfo: (info, socket) => {\n    // receive updates from pubsub and update the context\n    count = info.count;\n    socket.assign({ count });\n  },\n  render: async (context) => {\n    // render the view based on the state\n    const { count } = context;\n    return html`\n      <div>\n        <h1>Count is: ${count}</h1>\n        <button phx-click="decrement">-</button>\n        <button phx-click="increment">+</button>\n      </div>\n    `;\n  },\n});\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We're using a ",(0,i.kt)("inlineCode",{parentName:"p"},"SingleProcessPubSub")," implementation for simplicity. In a real application, you would use a\n",(0,i.kt)("inlineCode",{parentName:"p"},"RedisPubSub")," implementation in NodeJS or a ",(0,i.kt)("inlineCode",{parentName:"p"},"BroadcastChannelPubSub")," implementation in for Deno. See the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/real-time-multi-player-pub-sub/overview"},"Pub/Sub docs")," for more details.")),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This works just like the ",(0,i.kt)("inlineCode",{parentName:"li"},"counter.ts")," example except we're using Pub/Sub to broadcast the new count to all connected\nclients and subscribe to updates from other clients."),(0,i.kt)("li",{parentName:"ul"},"When a client clicks the increment or decrement button, we broadcast the new count to all connected clients using\n",(0,i.kt)("inlineCode",{parentName:"li"},"pubSub.broadcast"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"LiveViewJS")," framework automatically routes messages from ",(0,i.kt)("inlineCode",{parentName:"li"},"pubSub.broadcast")," to the ",(0,i.kt)("inlineCode",{parentName:"li"},"handleInfo")," function for\nany LiveView subscribed to the topic."),(0,i.kt)("li",{parentName:"ul"},"In this case, ",(0,i.kt)("inlineCode",{parentName:"li"},"handleInfo")," receives the new count and updates the LiveView context which re-renders the view.")),(0,i.kt)("h2",{id:"its-that-easy"},"It's that easy!"),(0,i.kt)("p",null,"In ~10 lines of code, we've built a real-time, multi-player counter! Sure, that isn't particularly useful, but it shows you how easy it is to create real-time, multi-player applications with very little code and effort."))}p.isMDXComponent=!0}}]);