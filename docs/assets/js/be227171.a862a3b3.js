"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[6300],{876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=d(n),c=i,u=h["".concat(p,".").concat(c)]||h[c]||m[c]||r;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7896),i=(n(2784),n(876));const r={sidebar_position:5},o="LiveView API - `handleParams`",l={unversionedId:"anatomy-of-a-liveview/handle-params",id:"anatomy-of-a-liveview/handle-params",title:"LiveView API - `handleParams`",description:"Let's explore the handleParams method.  Since the previous example (counterLiveView) did not use handleParams, we'll define helloLiveView.ts and explore the handleParams method with it. As you can see below, helloLiveView.ts defines mount, handleParams, and render.",source:"@site/docs/03-anatomy-of-a-liveview/handle-params.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/handle-params",permalink:"/docs/anatomy-of-a-liveview/handle-params",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"LiveView API - `handleEvent`",permalink:"/docs/anatomy-of-a-liveview/handle-event-details"},next:{title:"LiveView API - `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info"}},p={},d=[{value:"Example Renders",id:"example-renders",level:2},{value:"<code>handleParams</code> Method",id:"handleparams-method",level:2},{value:"<code>handleParams</code> Signature",id:"handleparams-signature",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveview-api---handleparams"},"LiveView API - ",(0,i.kt)("inlineCode",{parentName:"h1"},"handleParams")),(0,i.kt)("p",null,"Let's explore the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method.  Since the previous example (",(0,i.kt)("inlineCode",{parentName:"p"},"counterLiveView"),") did not use ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams"),", we'll define ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView.ts")," and explore the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method with it. As you can see below, ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView.ts")," defines ",(0,i.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),". "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="helloLiveView.ts"',title:'"helloLiveView.ts"'},'export const helloLiveView = createLiveView({\n  mount: (socket) => {\n    socket.assign({ name: "World" });\n  },\n  handleParams(url, socket) {\n    const name = url.searchParams.get("name") || "World";\n    socket.assign({ name });\n  },\n  render: (context) => html`Hello ${context.name}!`,\n});\n')),(0,i.kt)("p",null,"In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView"),", we are using ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," to update the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," query parameter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),".  If there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," query parameter, we default to ",(0,i.kt)("inlineCode",{parentName:"p"},"World"),"."),(0,i.kt)("h2",{id:"example-renders"},"Example Renders"),(0,i.kt)("p",null,"Let's say you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView")," routed to ",(0,i.kt)("inlineCode",{parentName:"p"},"/hello"),". Visiting the following paths would result in the following renders:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello World!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS&foo=bar")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS#blah")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!"))),(0,i.kt)("h2",{id:"handleparams-method"},(0,i.kt)("inlineCode",{parentName:"h2"},"handleParams")," Method"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," is automatically called by ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," on the initial load of a LiveView as well as anytime the URL of the LiveView changes. ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," allows developers to access the full ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," of the LiveView including the ",(0,i.kt)("inlineCode",{parentName:"p"},"host"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"path"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hash"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pathname"),", etc and then update the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"socket")," or otherwise respond to data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),".  "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"  Worth noting that the http server (e.g. express or oak) handles the routing of the brower to this LiveView. This means that changes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," are typically search parameters or hash changes.  Changing the host and/or path of a URL will typically mean the server routes you to a different LiveView (if one exists at that host and path).")),(0,i.kt)("h2",{id:"handleparams-signature"},(0,i.kt)("inlineCode",{parentName:"h2"},"handleParams")," Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"handleParams(url: URL, socket: LiveViewSocket<TContext, TInfos>): void | Promise<void>;\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method is the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," object not a ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," specific ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," object.  See the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/URL"},"MDN URL documentation")," for more information.")))}m.isMDXComponent=!0}}]);