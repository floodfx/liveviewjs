"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[6628],{876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=i,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7896),i=(n(2784),n(876));const r={sidebar_position:3},o="LiveViewSocket API - Push",l={unversionedId:"liveview-socket/liveviewsocket-api-push",id:"liveview-socket/liveviewsocket-api-push",title:"LiveViewSocket API - Push",description:'There are various methods for "pushing" data from the server to the client outside of render and updating the URL of',source:"@site/docs/04-liveview-socket/liveviewsocket-api-push.md",sourceDirName:"04-liveview-socket",slug:"/liveview-socket/liveviewsocket-api-push",permalink:"/docs/liveview-socket/liveviewsocket-api-push",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"LiveViewSocket API - Context",permalink:"/docs/liveview-socket/liveviewsocket-api-context"},next:{title:"LiveViewSocket API - Server Events",permalink:"/docs/liveview-socket/liveviewsocket-api-infos"}},s={},p=[{value:"LiveViewSocket Properties and Methods",id:"liveviewsocket-properties-and-methods",level:2},{value:"Pushing Events",id:"pushing-events",level:2},{value:"URL-based Pushes",id:"url-based-pushes",level:2},{value:"<code>pushPatch</code> Example",id:"pushpatch-example",level:3},{value:"<code>pushRedirect</code> Example",id:"pushredirect-example",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveviewsocket-api---push"},"LiveViewSocket API - Push"),(0,i.kt)("p",null,'There are various methods for "pushing" data from the server to the client outside of ',(0,i.kt)("inlineCode",{parentName:"p"},"render")," and updating the URL of\nthe LiveView."),(0,i.kt)("h2",{id:"liveviewsocket-properties-and-methods"},"LiveViewSocket Properties and Methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pushEvent(pushEvent: AnyLivePushEvent): void;")),(0,i.kt)("td",{parentName:"tr",align:null},"Pushes and event (possibly with data) from the server to the client. Requires either a ",(0,i.kt)("inlineCode",{parentName:"td"},"window.addEventListener")," defined for that event or a client ",(0,i.kt)("inlineCode",{parentName:"td"},"Hook")," to be defined and to be listening for the event via ",(0,i.kt)("inlineCode",{parentName:"td"},"this.handleEvent")," callback.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pushPatch(path: string, params?: URLSearchParams, replaceHistory?: boolean): Promise<void>;")),(0,i.kt)("td",{parentName:"tr",align:null},"Updates the LiveView's browser URL with the given path and query parameters.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pushRedirect(path: string, params?: URLSearchParams, replaceHistory?: boolean): Promise<void>;")),(0,i.kt)("td",{parentName:"tr",align:null},"Shutdowns the current LiveView and loads another LiveView in its place without reloading the whole page (i.e.,  making a full HTTP request). Can be used to remount the current LiveView if need be. Use ",(0,i.kt)("inlineCode",{parentName:"td"},"pushPatch")," to update the current LiveView without unloading and remounting.")))),(0,i.kt)("h2",{id:"pushing-events"},"Pushing Events"),(0,i.kt)("p",null,"An event is any JSON object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"type: string")," property and optionally any other key/value pairs. e.g., :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  type: "my-event",\n  foo: "bar"\n}\n')),(0,i.kt)("p",null,"Events can be pushed to the client using ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.pushEvent"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'socket.pushEvent({\n  type: "my-event",\n  foo: "bar",\n});\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Event names are prefixed with ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"phx:")," so an event with the type ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"my-event")," will be sent as ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"phx:my-event"),". :::"),(0,i.kt)("h3",{parentName:"admonition",id:"listening-for-events-on-the-client"},"Listening for Events on the Client"),(0,i.kt)("p",{parentName:"admonition"},"Events can be listened for in two ways:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},"Using ",(0,i.kt)("inlineCode",{parentName:"li"},"window.addEventListener"),":")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'window.addEventListener("phx:my-event", (event) => {\n  console.log(event.detail.foo); // "bar"\n});\n')),(0,i.kt)("ol",{parentName:"admonition",start:2},(0,i.kt)("li",{parentName:"ol"},"Using a client ",(0,i.kt)("inlineCode",{parentName:"li"},"Hook"),":")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'this.handleEvent("my-event", (event) => {\n  console.log(event.foo); // "bar"\n});\n'))),(0,i.kt)("p",null,"client-side component that can be used in your LiveView. We'll cover them in more detail in a later section."),(0,i.kt)("p",null,"For now, just know that you can define a client-side component that can listen for events and do something with them.\n:::"),(0,i.kt)("h2",{id:"url-based-pushes"},"URL-based Pushes"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"LiveViewSocket")," has two methods for updating the URL of the LiveView:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pushPatch")," - Updates the LiveView's browser URL with the given path and query parameters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pushRedirect")," - Shutdowns the current LiveView and loads another LiveView in its place without reloading the whole\npage (i.e., making a full HTTP request). Can be used to remount the current LiveView if need be.")),(0,i.kt)("h3",{id:"pushpatch-example"},(0,i.kt)("inlineCode",{parentName:"h3"},"pushPatch")," Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Update the URL to /foo?bar=baz\nsocket.pushPatch("/foo", new URLSearchParams({ bar: "baz" }));\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pushPatch")," will cause the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method to be invoked which can be used to update the LiveView's state based on\nthe new URL parameters."),(0,i.kt)("h3",{id:"pushredirect-example"},(0,i.kt)("inlineCode",{parentName:"h3"},"pushRedirect")," Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Shutdown the current LiveView and load a new LiveView at /foo?bar=baz\nsocket.pushRedirect("/foo", new URLSearchParams({ bar: "baz" }));\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pushRedirect")," will cause the current LiveView to be shutdown and a new LiveView to be loaded at the given path and\nquery parameters ",(0,i.kt)("strong",{parentName:"p"},"without reloading the whole page")," (i.e., making a full HTTP request)."))}u.isMDXComponent=!0}}]);