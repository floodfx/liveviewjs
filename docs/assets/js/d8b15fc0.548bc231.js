"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[1087],{876:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>u});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(r),u=i,v=h["".concat(c,".").concat(u)]||h[u]||p[u]||a;return r?n.createElement(v,o(o({ref:t},d),{},{components:r})):n.createElement(v,o({ref:t},d))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},7850:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7896),i=(r(2784),r(876));const a={sidebar_position:2},o="LiveView Paradigm",s={unversionedId:"overview/paradigm",id:"overview/paradigm",title:"LiveView Paradigm",description:"The LiveView model is simple. When a user makes the initial HTTP request, the server renders an HTML page. That page then connects to the server via a persistent web socket. From there, user-initiated events (clicks, form input, key events, focus/blur events, etc) are sent over the web socket to the server in very small packets. When the server receives the events, it runs the business logic for that LiveView, calculates the new rendered HTML, and then sends only the diffs to the client. The client automatically updates the page with the diffs. The server can also send diffs back to the client based on events on the server or received from other clients (think chat, or other pub/sub scenarios).",source:"@site/docs/01-overview/paradigm.md",sourceDirName:"01-overview",slug:"/overview/paradigm",permalink:"/liveviewjs/docs/overview/paradigm",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/liveviewjs/docs/overview/introduction"},next:{title:"Packages & Runtimes",permalink:"/liveviewjs/docs/overview/runtimes"}},c={},l=[{value:"How is this different from SPAs?",id:"how-is-this-different-from-spas",level:2}],d={toc:l};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveview-paradigm"},"LiveView Paradigm"),(0,i.kt)("p",null,"The LiveView model is simple. When a user makes the initial HTTP request, the server renders an HTML page. That page then connects to the server via a persistent web socket. From there, user-initiated events (clicks, form input, key events, focus/blur events, etc) are sent over the web socket to the server in very small packets. When the server receives the events, it runs the business logic for that LiveView, calculates the new rendered HTML, and then sends only the diffs to the client. The client automatically updates the page with the diffs. The server can also send diffs back to the client based on events on the server or received from other clients (think chat, or other pub/sub scenarios)."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"  ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," solves the complex parts of LiveViews such as connecting and managing web sockets, diffing and patching the UI, routing events, real-time/multiplayer, file uploads, and more. ")),(0,i.kt)("h2",{id:"how-is-this-different-from-spas"},"How is this different from SPAs?"),(0,i.kt)("p",null,"SPA-frameworks (React, Vue, Svelt, etc) only manage state and rendering on the client.  You need a completely different backend to handle business logic and persistence, typically a REST or GRAPHQL API (and related auth).  This means you need to write two code bases, one for the front-end and one for the back-end and then integrate them.  ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," is a single code base that handles both the front-end and back-end while enabling the same rich, user experiences that an SPA enables.  With ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," you write your business logic and persistence code in the same place as your front-end code.  This greatly simplifies the development process and reduces the number of moving parts and increases the velocity of development.   "),(0,i.kt)("p",null,"Its worth re-reading Chris McCord's quote in ",(0,i.kt)("a",{parentName:"p",href:"introduction"},"the Introduction")," or even better read these docs and run the examples! \ud83d\ude00 You'll see how easy it is to build rich, interactive, and responsive user experiences with ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," and start to understand how much of an improvement and paradigm shift it is."))}p.isMDXComponent=!0}}]);