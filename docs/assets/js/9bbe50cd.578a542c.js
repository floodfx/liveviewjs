"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[9080],{876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var i=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,v=p["".concat(c,".").concat(d)]||p[d]||u[d]||r;return n?i.createElement(v,a(a({ref:t},m),{},{components:n})):i.createElement(v,a({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5797:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(7896),o=(n(2784),n(876));const r={sidebar_position:3},a="LiveView API - `mount`",s={unversionedId:"anatomy-of-a-liveview/mount-details",id:"anatomy-of-a-liveview/mount-details",title:"LiveView API - `mount`",description:"mount is called by the LiveViewJS runtime when your LiveView is first mounted",source:"@site/docs/03-anatomy-of-a-liveview/mount-details.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/mount-details",permalink:"/docs/anatomy-of-a-liveview/mount-details",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"LiveView API",permalink:"/docs/anatomy-of-a-liveview/liveview-api"},next:{title:"LiveView API - `render`",permalink:"/docs/anatomy-of-a-liveview/render-details"}},c={},l=[{value:"<code>mount</code> Signature",id:"mount-signature",level:2}],m={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"liveview-api---mount"},"LiveView API - ",(0,o.kt)("inlineCode",{parentName:"h1"},"mount")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mount")," is called by the ",(0,o.kt)("strong",{parentName:"p"},"LiveViewJS")," runtime when your LiveView is first mounted\n(",(0,o.kt)("a",{parentName:"p",href:"/docs/lifecycle-of-a-liveview/intro"},"over HTTP and Websocket"),"). ",(0,o.kt)("inlineCode",{parentName:"p"},"mount")," is where you initialize the context (i.e.\nstate) of your LiveView (using ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.assign"),") and otherwise configure the LiveView. The\n",(0,o.kt)("a",{parentName:"p",href:"/docs/webserver-integration/overview"},"webserver integrations")," automatically make session data available via the\n",(0,o.kt)("inlineCode",{parentName:"p"},"session")," which can be useful if you need to use data from the user's session. Don't worry about ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," for now. We'll\ncover that later."),(0,o.kt)("h2",{id:"mount-signature"},(0,o.kt)("inlineCode",{parentName:"h2"},"mount")," Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mount(\n  socket: LiveViewSocket<TContext, TInfos>,\n  session: Partial<SessionData>,\n  params: LiveViewMountParams\n): void | Promise<void>;\n")),(0,o.kt)("p",null,"As you can see in the ",(0,o.kt)("inlineCode",{parentName:"p"},"counterLiveView.ts")," below, ",(0,o.kt)("inlineCode",{parentName:"p"},"mount")," initializes the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," (and doesn't use the ",(0,o.kt)("inlineCode",{parentName:"p"},"session"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counterLiveView.ts" {9-12}',title:'"counterLiveView.ts"',"{9-12}":!0},'import { createLiveView, html } from "liveviewjs";\n/**\n * A basic counter that increments and decrements a number.\n */\nexport const counterLiveView = createLiveView<\n  { count: number }, // Define LiveView Context / State\n  { type: "increment" } | { type: "decrement" } // Define LiveView Events\n>({\n  // Setup / initialize the LiveView Context (i.e.,  set count to 0)\n  mount: (socket) => {\n    socket.assign({ count: 0 });\n  },\n  // Handle incoming increment and decrement events from User input\n  handleEvent: (event, socket) => {\n    const { count } = socket.context;\n    switch (event.type) {\n      case "increment":\n        socket.assign({ count: count + 1 });\n        break;\n      case "decrement":\n        socket.assign({ count: count - 1 });\n        break;\n    }\n  },\n  // Renders the Counter View based on the current Context / State\n  render: (context) => {\n    const { count } = context;\n    return html`\n      <div>\n        <h1>Count is: ${count}</h1>\n        <button phx-click="decrement">-</button>\n        <button phx-click="increment">+</button>\n      </div>\n    `;\n  },\n});\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"LiveViewSocket")," is passed into all methods except for ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"render"),". ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"LiveViewSocket")," is the swiss army knife of"),(0,o.kt)("p",{parentName:"admonition"},"LiveViewJS. We will cover its ",(0,o.kt)("a",{parentName:"p",href:"/docs/liveview-socket/liveviewsocket-api"},"API in more detail")," shortly. :::")))}u.isMDXComponent=!0}}]);