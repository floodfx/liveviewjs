"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[1544],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7896),r=(n(2784),n(876));const i={sidebar_position:8},o="Background Task with `handleInfo`",s={unversionedId:"anatomy-of-a-liveview/handle-info-background-task",id:"anatomy-of-a-liveview/handle-info-background-task",title:"Background Task with `handleInfo`",description:'A "live" dashboard that updates with the latest metrics periodically is another use case that shines with server events',source:"@site/docs/03-anatomy-of-a-liveview/handle-info-background-task.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/handle-info-background-task",permalink:"/docs/anatomy-of-a-liveview/handle-info-background-task",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"User-Initiated Event with `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info-user-initiated"},next:{title:"Pub/Sub with `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info-pub-sub"}},l={},d=[{value:"Example Live Dashboard LiveView",id:"example-live-dashboard-liveview",level:2}],c={toc:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"background-task-with-handleinfo"},"Background Task with ",(0,r.kt)("inlineCode",{parentName:"h1"},"handleInfo")),(0,r.kt)("p",null,'A "live" dashboard that updates with the latest metrics periodically is another use case that shines with server events\nhandled asynchronously by ',(0,r.kt)("inlineCode",{parentName:"p"},"handleInfo"),"."),(0,r.kt)("h2",{id:"example-live-dashboard-liveview"},"Example Live Dashboard LiveView"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dashboardLiveView.ts"',title:'"dashboardLiveView.ts"'},'/**\n * A dashboard that automatically refreshes every second\n */\nexport const dashboardLiveView = createLiveView<\n  // Define LiveView Context / State\n  { newOrders: number; salesAmount: number; rating: number },\n  // Define LiveView External Events\n  {} // No external events\n  // Define LiveView Internal Events\n  { type: "tick" }\n>({\n  mount: (socket) => {\n    if (socket.connected) {\n      // only start repeating if the socket is connected (i.e.,  websocket is connected)\n      socket.repeat(() => {\n        // send the tick event to `handleInfo` every second\n        socket.sendInfo({ type: "tick" });\n      }, 1000);\n    }\n    socket.assign(nextRandomData());\n  },\n  // on tick, update data\n  handleInfo: (_, socket) => socket.assign(fetchLatestData()),\n  // render the dashboard\n  render: (context) => {\n    const { newOrders, salesAmount, rating } = context;\n    return html`\n      <h1>Sales Dashboard</h1>\n      <hr />\n      <span>\ud83e\udd61 New Orders</span>\n      <h2>${newOrders}</h2>\n      <hr />\n      <span>\ud83d\udcb0 Sales Amount</span>\n      <h2>${salesAmount}</h2>\n      <hr />\n      <span>\ud83c\udf1f Rating</spa>\n      <h2>${rating}</h2>\n    `;\n  },\n});\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"fetchLatestData")," method is not shown here because the implementation is not important. Just assume it"),(0,r.kt)("p",{parentName:"admonition"},"return the latest order, sales, and review data from a database, feed, API, etc. :::"),(0,r.kt)("h2",{parentName:"admonition",id:"how-it-works"},"How it works"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The LiveView renders a dashboard that refreshes every second with the latest order, sales, and review data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mount")," kicks off the ",(0,r.kt)("inlineCode",{parentName:"li"},"repeat")," function that sends a ",(0,r.kt)("inlineCode",{parentName:"li"},"tick")," event to ",(0,r.kt)("inlineCode",{parentName:"li"},"handleInfo")," every second."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"handleInfo")," method then fetches the data asynchronously and updates the context with the latest data."),(0,r.kt)("li",{parentName:"ul"},"When the latest data is successfully fetched, the ",(0,r.kt)("inlineCode",{parentName:"li"},"context")," is updated, which causes the ",(0,r.kt)("inlineCode",{parentName:"li"},"render")," method to be called\nagain, pushing the latest data to the client.")),(0,r.kt)("h2",{parentName:"admonition",id:"handleinfo-use-cases"},(0,r.kt)("inlineCode",{parentName:"h2"},"handleInfo")," Use Cases"),(0,r.kt)("p",{parentName:"admonition"},"There are three main use cases for ",(0,r.kt)("inlineCode",{parentName:"p"},"handleInfo"),":"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Handling an asynchronous process initiated from a user event without blocking the UI"),(0,r.kt)("li",{parentName:"ul"},"Handling an asynchronous process initiated from a background process"),(0,r.kt)("li",{parentName:"ul"},"Handling a pub/sub message"))))}h.isMDXComponent=!0}}]);