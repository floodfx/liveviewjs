"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[9484],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,v=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return n?i.createElement(v,o(o({ref:t},c),{},{components:n})):i.createElement(v,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(7896),a=(n(2784),n(876));const r={sidebar_position:1},o="LiveView API",l={unversionedId:"anatomy-of-a-liveview/liveview-api",id:"anatomy-of-a-liveview/liveview-api",title:"LiveView API",description:"provides great type hints, autocompletion, etc. If the typescript syntax is confusing, just ignore it and focus on the",source:"@site/docs/03-anatomy-of-a-liveview/liveview-api.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/liveview-api",permalink:"/docs/anatomy-of-a-liveview/liveview-api",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Anatomy of a LiveView",permalink:"/docs/category/anatomy-of-a-liveview"},next:{title:"LiveView API - `mount`",permalink:"/docs/anatomy-of-a-liveview/mount-details"}},p={},s=[{value:"Example LiveView Implementation",id:"example-liveview-implementation",level:2},{value:"<code>createLiveView</code> helper",id:"createliveview-helper",level:2},{value:"<code>html</code> helper",id:"html-helper",level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"liveview-api"},"LiveView API"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"We are going to be using Typescript in our examples because ",(0,a.kt)("strong",{parentName:"mdxAdmonitionTitle"},"LiveViewJS")," is very thoroughly typed, which"),(0,a.kt)("p",{parentName:"admonition"},"provides great type hints, autocompletion, etc. If the typescript syntax is confusing, just ignore it and focus on the\ncode. :::"),(0,a.kt)("h2",{parentName:"admonition",id:"liveview-api-is-five-methods"},"LiveView API is Five Methods"),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("strong",{parentName:"p"},"LiveViewJS")," API is extremely simple but very flexible. There are only five methods that make up the LiveView API:\n",(0,a.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleEvent"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleInfo"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"handleParams"),". Technically, only ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," is required. The other\nfour methods (",(0,a.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleEvent"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleInfo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleParams"),") are optional but usually ",(0,a.kt)("inlineCode",{parentName:"p"},"mount")," and at least one\nother ",(0,a.kt)("inlineCode",{parentName:"p"},"handle")," method is defined to enable a dynamic experience.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const helloLiveView = createLiveView({\n  render: () => html`Hello World`,\n});\n")),(0,a.kt)("p",null,'While "valid" a LiveView like this is not very useful nor particularly exciting. Let\'s look at a more useful example.\n:::'),(0,a.kt)("h2",{id:"example-liveview-implementation"},"Example LiveView Implementation"),(0,a.kt)("p",null,"It's helpful to look at a simple LiveView example to see how the LiveView API works. Here is a simple LiveView that\nrenders a counter and has buttons to increment and decrement the counter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counterLiveView.ts"',title:'"counterLiveView.ts"'},'import { createLiveView, html } from "liveviewjs";\n/**\n * A basic counter that increments and decrements a number.\n */\nexport const counterLiveView = createLiveView<\n  { count: number }, // Define LiveView Context / State\n  { type: "increment" } | { type: "decrement" } // Define LiveView Events\n>({\n  // Setup / initialize the LiveView Context (i.e.,  set count to 0)\n  mount: (socket) => {\n    socket.assign({ count: 0 });\n  },\n  // Handle incoming increment and decrement events from User input\n  handleEvent: (event, socket) => {\n    const { count } = socket.context;\n    switch (event.type) {\n      case "increment":\n        socket.assign({ count: count + 1 });\n        break;\n      case "decrement":\n        socket.assign({ count: count - 1 });\n        break;\n    }\n  },\n  // Renders the Counter View based on the current Context / State\n  render: (context) => {\n    const { count } = context;\n    return html`\n      <div>\n        <h1>Count is: ${count}</h1>\n        <button phx-click="decrement">-</button>\n        <button phx-click="increment">+</button>\n      </div>\n    `;\n  },\n});\n')),(0,a.kt)("p",null,"Before we look at the five LiveView methods a very quick aside on the first line of the example above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { createLiveView, html } from "liveviewjs";\n')),(0,a.kt)("h2",{id:"createliveview-helper"},(0,a.kt)("inlineCode",{parentName:"h2"},"createLiveView")," helper"),(0,a.kt)("p",null,"LiveViewJS provides various helpers to create and implement LiveViews. The ",(0,a.kt)("inlineCode",{parentName:"p"},"createLiveView")," function is the canonical\nway to define the various functions that make up a LiveView (",(0,a.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," etc) and supports typing the LiveView via\nTypescript annotations ",(0,a.kt)("inlineCode",{parentName:"p"},"TContext"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"TEvents"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"TInfo"),"."),(0,a.kt)("h2",{id:"html-helper"},(0,a.kt)("inlineCode",{parentName:"h2"},"html")," helper"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"html")," function is a tagged template literal that allows you to write HTML with dynamic content in a very normal way\nusing javascript\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},"template literals"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"html")," tag\nhandles escaping content to prevent injection attacks but just as importantly, the ",(0,a.kt)("inlineCode",{parentName:"p"},"html")," tag also\n(transparently) creates the data structure necessary to efficiently calculate diffs between the current HTML and the new\nHTML. This is what allows ",(0,a.kt)("strong",{parentName:"p"},"LiveViewJS")," to efficiently update the DOM with only the changes."),(0,a.kt)("p",null,"Let's take a closer look at ",(0,a.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleEvent"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handleInfo"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"handleParams")," methods in the next\nsections."))}m.isMDXComponent=!0}}]);