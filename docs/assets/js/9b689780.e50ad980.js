"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[5723],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),v=i,h=u["".concat(l,".").concat(v)]||u[v]||d[v]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(7896),i=(n(2784),n(876));const o={sidebar_position:4},s="LiveViewSocket API - Server Events",a={unversionedId:"liveview-socket/liveviewsocket-api-infos",id:"liveview-socket/liveviewsocket-api-infos",title:"LiveViewSocket API - Server Events",description:"Server events are important to connect LiveViews with asynchronous processes. For example, a LiveView may need to wait",source:"@site/docs/04-liveview-socket/liveviewsocket-api-infos.md",sourceDirName:"04-liveview-socket",slug:"/liveview-socket/liveviewsocket-api-infos",permalink:"/docs/liveview-socket/liveviewsocket-api-infos",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"LiveViewSocket API - Push",permalink:"/docs/liveview-socket/liveviewsocket-api-push"},next:{title:"LiveViewSocket API - Uploads",permalink:"/docs/liveview-socket/liveviewsocket-api-uploads"}},l={},c=[{value:"LiveViewSocket Properties and Methods",id:"liveviewsocket-properties-and-methods",level:2},{value:"<code>sendInfo</code> Method",id:"sendinfo-method",level:2},{value:"<code>subscribe</code> Method",id:"subscribe-method",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveviewsocket-api---server-events"},"LiveViewSocket API - Server Events"),(0,i.kt)("p",null,"Server events are important to connect LiveViews with asynchronous processes. For example, a LiveView may need to wait\nfor a long database query or search service to complete before rendering the results. Or a LiveView may want to send\nupdates based on a webhook or action from another user."),(0,i.kt)("h2",{id:"liveviewsocket-properties-and-methods"},"LiveViewSocket Properties and Methods"),(0,i.kt)("p",null,"There are two LiveViewSocket API methods that help facilitate server events: | Name | Description | |---|---| |\n",(0,i.kt)("inlineCode",{parentName:"p"},"sendInfo(info: Info<TInfos>): void;"),' | Send an internal event (a.k.a "Info") to the LiveView\'s ',(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo")," method | |\n",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe(topic: string): Promise<void>;")," | Subscribe to the given topic using pub/sub. Events published to this topic\nwill be delivered to ",(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo"),". |"),(0,i.kt)("h2",{id:"sendinfo-method"},(0,i.kt)("inlineCode",{parentName:"h2"},"sendInfo")," Method"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"socket.sendInfo")," enables a ",(0,i.kt)("inlineCode",{parentName:"p"},"LiveView")," to send message to itself which is useful for executing actions that are\nasynchronous. Messages sent via ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.sendInfo")," are received by the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo")," method after the current render\nlifecycle has completed. (In other words, ",(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo")," is called after the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," call which will result in another\n",(0,i.kt)("inlineCode",{parentName:"p"},"render")," after ",(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo")," completes.)"),(0,i.kt)("p",null,"When creating your ",(0,i.kt)("inlineCode",{parentName:"p"},"LiveView")," you can provide the typing for ",(0,i.kt)("inlineCode",{parentName:"p"},"TInfo"),' which describes the "shape" of the possible info\nmessages. e.g.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Define the MyContext, MyEvents, and MyInfo types\ntype MyContext = {query: string, loading: boolean, results: string[]};\ntype MyEvents = {type: "search", query: string};\ntype MyInfo = {type: "run_search", query: string} | {type: "refresh"};\n\n// Annotate the createLiveView function with the types\nconst myLiveView = createLiveView<MyContext, MyEvents, MyInfo>(\n  handleEvent: (event, socket) => {\n    ...\n    if(event.type === "search" ) {\n      // update the context with loading status and empty results so\n      // that UI will be updated for user\n      socket.assign({ loading: true, results: [], query: event.query });\n      // send internal message to run the search process\n      socket.sendInfo({ type: "run_search", query: event.query })\n    }\n  }\n  ...\n  handleInfo: (info, socket) => {\n    if(info.type === "run_search") {\n      const { query } = info;\n      // run the search\n      const results = searchService.run(query)\n      // update the context with results which will update the UI\n      socket.assign({ loading: false, results })\n    }\n    ...\n  }\n  ...\n)\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"socket.sendInfo")," can take a type as a string for cases where there isn't additional information passed along with\nthe message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// or send just the "type" as a string\nsocket.sendInfo("refresh");\n')),(0,i.kt)("h2",{id:"subscribe-method"},(0,i.kt)("inlineCode",{parentName:"h2"},"subscribe")," Method"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"socket.subscribe")," enables a ",(0,i.kt)("inlineCode",{parentName:"p"},"LiveView")," to subscribe to a topic using pub/sub. Events published to this topic will be\ndelivered to ",(0,i.kt)("inlineCode",{parentName:"p"},"handleInfo"),". This is useful for cases where a LiveView needs to receive updates from another process or\nuser."),(0,i.kt)("p",null,"You can provide the type annotation for messages you expect to receive from a pub/sub topic as well."))}d.isMDXComponent=!0}}]);