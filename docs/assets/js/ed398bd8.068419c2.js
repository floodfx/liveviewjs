"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[9773],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var d=2;d<l;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var o=n(7896),a=(n(2784),n(876));const l={sidebar_position:5},i="LiveViewSocket API - Uploads",r={unversionedId:"liveview-socket/liveviewsocket-api-uploads",id:"liveview-socket/liveviewsocket-api-uploads",title:"LiveViewSocket API - Uploads",description:"A common use case for a web application is to allow users to upload files. The following methods on the LiveViewSocket",source:"@site/docs/04-liveview-socket/liveviewsocket-api-uploads.md",sourceDirName:"04-liveview-socket",slug:"/liveview-socket/liveviewsocket-api-uploads",permalink:"/docs/liveview-socket/liveviewsocket-api-uploads",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"LiveViewSocket API - Server Events",permalink:"/docs/liveview-socket/liveviewsocket-api-infos"},next:{title:"LiveViewSocket API - Misc",permalink:"/docs/liveview-socket/liveviewsocket-api-misc"}},s={},d=[{value:"LiveViewSocket Properties and Methods",id:"liveviewsocket-properties-and-methods",level:2},{value:"<code>allowUpload</code> Method",id:"allowupload-method",level:2},{value:"<code>cancelUpload</code> Method",id:"cancelupload-method",level:2},{value:"<code>consumeUploadedEntries</code> Method",id:"consumeuploadedentries-method",level:2},{value:"<code>uploadedEntries</code> Method",id:"uploadedentries-method",level:2},{value:"More details",id:"more-details",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"liveviewsocket-api---uploads"},"LiveViewSocket API - Uploads"),(0,a.kt)("p",null,"A common use case for a web application is to allow users to upload files. The following methods on the ",(0,a.kt)("inlineCode",{parentName:"p"},"LiveViewSocket"),"\nenable you to upload files to your server."),(0,a.kt)("h2",{id:"liveviewsocket-properties-and-methods"},"LiveViewSocket Properties and Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"allowUpload(name: string, options?: UploadConfigOptions): Promise<void>;")),(0,a.kt)("td",{parentName:"tr",align:null},"Allows file uploads for the given LiveView and configures the upload options (filetypes, size, etc).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"cancelUpload(configName: string, ref: string): Promise<void>;")),(0,a.kt)("td",{parentName:"tr",align:null},"Cancels the file upload for a given UploadConfig by config name and file ref.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"consumeUploadedEntries<T>(configName: string,fn: (meta: ConsumeUploadedEntriesMeta, entry: UploadEntry) => Promise<T>):Promise<T[]>;")),(0,a.kt)("td",{parentName:"tr",align:null},'Consume the uploaded files for a given UploadConfig (by name). This should only be called after the form\'s "save" event has occurred which guarantees all the files for the upload have been fully uploaded.')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uploadedEntries(configName: string): Promise<{completed: UploadEntry[];inProgress: UploadEntry[];}>;")),(0,a.kt)("td",{parentName:"tr",align:null},"Returns two sets of files that are being uploaded, those ",(0,a.kt)("inlineCode",{parentName:"td"},"completed")," and those ",(0,a.kt)("inlineCode",{parentName:"td"},"inProgress")," for a given UploadConfig (by name). Unlike ",(0,a.kt)("inlineCode",{parentName:"td"},"consumeUploadedEntries"),', this does not require the form\'s "save" event to have occurred and will not throw if any of the entries are not fully uploaded.')))),(0,a.kt)("h2",{id:"allowupload-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"allowUpload")," Method"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"allowUpload")," is used to configure the file upload options for a given LiveView. This method should be called in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"mount")," method of your LiveView. The ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," parameter is optional and if not provided, the default options will be\nused. ",(0,a.kt)("inlineCode",{parentName:"p"},"allowUpload")," requires a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter which is used to identify the upload config elsewhere in your code. Here\nis an example of configuring the upload options for a LiveView using ",(0,a.kt)("inlineCode",{parentName:"p"},"allowUpload"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\nmount: (socket) => {\n  ...\n  // configure the upload constraints\n  socket.allowUpload("photos", {\n    accept: [".png", ".jpg", ".jpeg", ".gif"], // only allow images\n    maxEntries: 3, // only allow 3 files to be uploaded\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n  });\n  ...\n}\n...\n')),(0,a.kt)("p",null,"Now that you've configured the upload options, you can use those options to render a ",(0,a.kt)("inlineCode",{parentName:"p"},"live_file_input")," tag that allows\nthe user to upload files. Here is an example of a ",(0,a.kt)("inlineCode",{parentName:"p"},"live_file_input")," tag that uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"photos")," upload config as part of\nyour ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- use the "photos" upload config --\x3e\n<div>${live_file_input(uploads.photos)}</div>\n')),(0,a.kt)("h2",{id:"cancelupload-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"cancelUpload")," Method"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cancelUpload"),' is a way to remove a file from the set of entries that either are ready to be uploaded or have already\nbeen uploaded (but not fully consumed yet). Typically, you would call this method in response to a user action such as\nclicking a "remove" button next to a file. Here is an example of calling ',(0,a.kt)("inlineCode",{parentName:"p"},"cancelUpload")," in response to a user action:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'handleEvent: (socket, event) => {\n  ...\n  switch (event.type) {\n    ...\n    case "cancel":\n      const { config_name, ref } = event;\n      // remove the uploaded entry from the upload config\n      socket.cancelUpload(config_name, ref);\n      break;\n    ...\n  }\n  ...\n}\n...\nrender: (context, meta) {\n  ...\n  <a phx-click="cancel" phx-value-config_name="photos" phx-value-ref="${entry.ref}">\ud83d\uddd1</a>\n  ...\n}\n...\n')),(0,a.kt)("h2",{id:"consumeuploadedentries-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"consumeUploadedEntries")," Method"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"consumeUploadedEntries")," is a way to fully process the uploaded files for a given ",(0,a.kt)("inlineCode",{parentName:"p"},"UploadConfig")," (by name). ",(0,a.kt)("strong",{parentName:"p"},'This\nshould only be called after the form\'s "save" event has occurred which guarantees all the files for the upload have been\nfully uploaded'),". Here is an example of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"consumeUploadedEntries"),' after the form\'s "save" event has occurred:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\nhandleEvent: (socket, event) => {\n  ...\n  switch (event.type) {\n    ...\n    case "save":\n      ...\n      // consume the uploaded entries for the "photos" upload config\n      await socket.consumeUploadedEntries("photos", async (meta, entry) => {\n        // we could create thumbnails, scan for viruses, etc.\n        // but for now move the data from the temp file (meta.path) to a public directory\n        meta.fileSystem.createOrAppendFile(`./public/${filename(entry)}`, meta.path);\n      });\n      ...\n      break;\n    ...\n  }\n  ...\n}\n...\n')),(0,a.kt)("h2",{id:"uploadedentries-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"uploadedEntries")," Method"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"uploadedEntries")," returns the set of files that are either in progress of being uploaded or have already been uploaded\n(but not fully consumed yet). Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"consumeUploadedEntries")," this can be called before the form's save event has\noccured."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\n// get the complete and in progress entries for the "photos" upload config\nconst { completed, inProgress } = await socket.uploadedEntries("photos");\n// do something with the entries\n...\n')),(0,a.kt)("h2",{id:"more-details"},"More details"),(0,a.kt)("p",null,"More details on file uploads can be found in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/file-upload/overview"},"File Uploads")," section of the docs."))}c.isMDXComponent=!0}}]);