"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[8379],{876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=a,u=m["".concat(p,".").concat(h)]||m[h]||c[h]||o;return n?i.createElement(u,r(r({ref:t},d),{},{components:n})):i.createElement(u,r({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7896),a=(n(2784),n(876));const o={sidebar_position:6},r="LiveViewSocket API - Misc",l={unversionedId:"liveview-socket/liveviewsocket-api-misc",id:"liveview-socket/liveviewsocket-api-misc",title:"LiveViewSocket API - Misc",description:"A few other methods and properties are available on the LiveViewSocket object that we haven't covered yet.",source:"@site/docs/04-liveview-socket/liveviewsocket-api-misc.md",sourceDirName:"04-liveview-socket",slug:"/liveview-socket/liveviewsocket-api-misc",permalink:"/docs/liveview-socket/liveviewsocket-api-misc",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"LiveViewSocket API - Uploads",permalink:"/docs/liveview-socket/liveviewsocket-api-uploads"},next:{title:"Raw `LiveViewSocket` API",permalink:"/docs/liveview-socket/raw-liveviewsocket-api"}},p={},s=[{value:"LiveViewSocket Properties and Methods",id:"liveviewsocket-properties-and-methods",level:2},{value:"<code>id</code> Property",id:"id-property",level:2},{value:"<code>connected</code> Property",id:"connected-property",level:2},{value:"<code>pageTitle</code> Method",id:"pagetitle-method",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"liveviewsocket-api---misc"},"LiveViewSocket API - Misc"),(0,a.kt)("p",null,"A few other methods and properties are available on the LiveViewSocket object that we haven't covered yet."),(0,a.kt)("h2",{id:"liveviewsocket-properties-and-methods"},"LiveViewSocket Properties and Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")," (property, read-only)"),(0,a.kt)("td",{parentName:"tr",align:null},"The (random) id of the LiveView")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"connected")," (property, read-only)"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the websocket is connected. ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," if connected to a websocket, ",(0,a.kt)("inlineCode",{parentName:"td"},"false")," for http request")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pageTitle(newPageTitle:string):void;")),(0,a.kt)("td",{parentName:"tr",align:null},"Updates the ",(0,a.kt)("inlineCode",{parentName:"td"},"<title>")," tag of the LiveView. Requires using the ",(0,a.kt)("inlineCode",{parentName:"td"},"live_title")," helper in rendering the page.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"putFlash(key: string, value: string): Promise<void>;")),(0,a.kt)("td",{parentName:"tr",align:null},"Add flash message to the socket for a given key and value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"repeat(fn: () => void, intervalMillis: number): void;")),(0,a.kt)("td",{parentName:"tr",align:null},"Runs the given function on the given interval until this LiveView is unloaded.")))),(0,a.kt)("h2",{id:"id-property"},(0,a.kt)("inlineCode",{parentName:"h2"},"id")," Property"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property is a unique identifier for the LiveView. It is a random string that is generated when the LiveView is\ncreated. It is useful for debugging and logging purposes."),(0,a.kt)("h2",{id:"connected-property"},(0,a.kt)("inlineCode",{parentName:"h2"},"connected")," Property"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"connected")," property is a boolean that indicates whether the LiveView is connected to a websocket or not. If the\nLiveView is connected to a websocket, then the value will be ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". If the LiveView is not connected to a websocket\n(i.e.,  executing an HTTP request), then the value will be ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". This is useful for executing logic based on whether\nthe LiveView has completed the initial websocket connection or not. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\nif (socket.connected) {\n  // only subscribe to the topic if the LiveView is connected to a websocket\n  await socket.subscribe("my_topic");\n}\n...\n')),(0,a.kt)("h2",{id:"pagetitle-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"pageTitle")," Method"),(0,a.kt)("p",null,"LiveViewJS provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"live_title_tag")," helper that enables LiveViews to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"<title>")," tag of the page\ndynamically. This is useful for LiveViews that need to update the page title based on the current state of the LiveView.\nFor example, a LiveView may want to update the title to include the details of the item being viewed. The ",(0,a.kt)("inlineCode",{parentName:"p"},"pageTitle"),"\nmethod works in partnership with the ",(0,a.kt)("inlineCode",{parentName:"p"},"live_title_tag")," to enable dynamic page titles. ",(0,a.kt)("inlineCode",{parentName:"p"},"live_title_tag")," is usually used\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},"LiveViewHtmlPageTemplate")," template. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{14}","{14}":!0},'export const htmlPageTemplate: LiveViewHtmlPageTemplate = (\n  liveTitleOptions: LiveTitleOptions,\n  csrfToken: string,\n  liveViewContent: LiveViewTemplate\n): LiveViewTemplate => {\n  const pageTitle = liveTitleOptions?.title ?? "";\n  const pageTitlePrefix = liveTitleOptions?.prefix ?? "";\n  const pageTitleSuffix = liveTitleOptions?.suffix ?? "";\n  return html`\n    <!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <meta name="csrf-token" content="${csrfToken}" />\n        ${live_title_tag(pageTitle, { prefix: pageTitlePrefix, suffix: pageTitleSuffix })}\n        <script defer type="text/javascript" src="/js/index.js"><\/script>\n      </head>\n      <body>\n        <p><a href="/">\u2190 Back</a><br /><br /></p>\n        ${safe(liveViewContent)}\n      </body>\n    </html>\n  `;\n};\n')),(0,a.kt)("p",null,"Now you can update the page title from within the LiveView using the ",(0,a.kt)("inlineCode",{parentName:"p"},"pageTitle")," method. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\nsocket.pageTitle("My New Page Title");\n...\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"pageTitle")," method does not update the ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"prefix")," or ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"suffix")," part of the ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"live_title_tag"),". :::"),(0,a.kt)("h2",{parentName:"admonition",id:"putflash-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"putFlash")," Method"),(0,a.kt)("p",{parentName:"admonition"},"Flash messages are a way to display small notes or alerts to users to provide feedback on actions they are taken.\n",(0,a.kt)("inlineCode",{parentName:"p"},"putFlash")," is a method that allows you to add a flash message to the LiveView. The flash message will be displayed on\nthe next render. The ",(0,a.kt)("inlineCode",{parentName:"p"},"putFlash")," method takes two arguments: the key and the value. The key is used to identify the flash\nmessage and the value is the message to display. ",(0,a.kt)("inlineCode",{parentName:"p"},"putFlash")," usually works with a ",(0,a.kt)("inlineCode",{parentName:"p"},"LiveViewWrapperTemplate")," to be used as\nthe root template for the LiveView. The ",(0,a.kt)("inlineCode",{parentName:"p"},"LiveViewWrapperTemplate")," is used to display the flash messages. For example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{5-7}","{5-7}":!0},'export const wrapperTemplate: LiveViewWrapperTemplate = async (\n  session: SessionData,\n  liveViewContent: LiveViewTemplate\n): Promise<LiveViewTemplate> => {\n  const flashAdaptor = new SessionFlashAdaptor();\n  const infoFlash = (await flashAdaptor.popFlash(session, "info")) || "";\n  const errorFlash = (await flashAdaptor.popFlash(session, "error")) || "";\n  return html`\n    <main role="main" class="container">\n      ${infoFlash !== "" ? html`<blockquote><strong>\u2139 Info</strong> ${infoFlash}</blockquote>` : ""} ${errorFlash !== ""\n        ? html`<blockquote><strong>\u26a0\ufe0f Error</strong> ${errorFlash}</blockquote>`\n        : ""} ${safe(liveViewContent)}\n    </main>\n  `;\n};\n')),(0,a.kt)("h2",{parentName:"admonition",id:"repeat-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"repeat")," Method"),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"repeat")," method is a way to execute a function on a given interval. The ",(0,a.kt)("inlineCode",{parentName:"p"},"repeat")," method takes two arguments: the\nfunction to execute and the interval in milliseconds. The function will be executed on the given interval until the\nLiveView is unloaded. For example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'...\nif (socket.connected) {\n  // only start repeating if the socket is connected\n  socket.repeat(() => {\n    // send the tick event to `handleInfo` every second\n    socket.sendInfo({ type: "tick" });\n  }, 1000);\n}\n...\n'))))}c.isMDXComponent=!0}}]);