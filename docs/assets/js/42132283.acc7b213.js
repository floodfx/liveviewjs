"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[3369],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7896),i=(n(2784),n(876));const a={sidebar_position:1},r="Client-side Javascript",s={unversionedId:"client-javascript/overview",id:"client-javascript/overview",title:"Client-side Javascript",description:"LiveViewJS pages do, in fact, require some client-side javascript to be loaded as part of the HTML page. This",source:"@site/docs/10-client-javascript/overview.md",sourceDirName:"10-client-javascript",slug:"/client-javascript/overview",permalink:"/docs/client-javascript/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Client-side Javascript",permalink:"/docs/category/client-side-javascript"},next:{title:'"Hooks" (not the React kind)',permalink:"/docs/client-javascript/client-hooks"}},l={},c=[{value:"Default client-side JS:",id:"default-client-side-js",level:2},{value:"Progress Bar",id:"progress-bar",level:3},{value:"Connect to the LiveSocket",id:"connect-to-the-livesocket",level:3},{value:"Debugging and Latency Simulation",id:"debugging-and-latency-simulation",level:3},{value:"Default client-side JS is good start",id:"default-client-side-js-is-good-start",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client-side-javascript"},"Client-side Javascript"),(0,i.kt)("p",null,"LiveViewJS pages do, in fact, require some client-side javascript to be loaded as part of the HTML page. This\nclient-side javascript handles parsing the ",(0,i.kt)("inlineCode",{parentName:"p"},"phx-*")," attributes, connecting to the server (via websocket), appling the\ndiffs, and turning user interactions into events, among other things."),(0,i.kt)("p",null,"Let's look at the client-side javascript in more detail."),(0,i.kt)("h2",{id:"default-client-side-js"},"Default client-side JS:"),(0,i.kt)("p",null,"The default Typescript that is compiled into the client-side javascript loaded by ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import NProgress from "nprogress";\nimport { Socket } from "phoenix";\nimport "phoenix_html";\nimport { LiveSocket } from "phoenix_live_view";\n\n// Define the route that websockets will use to connect to your server\nconst url = "/live";\n\n// Pull out the csrf token from the meta tag\nlet csrfToken = document.querySelector("meta[name=\'csrf-token\']").getAttribute("content");\n\n// Create the LiveSocket\nlet liveSocket = new LiveSocket(url, Socket, { params: { _csrf_token: csrfToken } });\n\n// Show progress bar on live navigation and form submits (requires NProgress css)\nwindow.addEventListener("phx:page-loading-start", (info) => NProgress.start());\nwindow.addEventListener("phx:page-loading-stop", (info) => NProgress.done());\n\n// connect if there are any LiveViews on the page\nliveSocket.connect();\n\n// If you want to expose liveSocket messages in the console for debugging, uncomment the following:\n// liveSocket.enableDebug();\n\n// If you want to simulate request latency, you can uncomment the following\n// liveSocket.enableLatencySim(1000)\n\n// finally add the liveSocket to the window\n(window as any).liveSocket = liveSocket;\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The libraries used in ",(0,i.kt)("strong",{parentName:"mdxAdmonitionTitle"},"LiveViewJS")," are exactly the same libraries used in Phoenix LiveView. Beyond ensuring we"),(0,i.kt)("p",{parentName:"admonition"},"don't reinvent the wheel, this provides ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," with battle-tested, robust code that has proven extremely\nreliable. :::"),(0,i.kt)("h2",{parentName:"admonition",id:"walkthrough-of-the-client-side-js"},"Walkthrough of the client-side JS"),(0,i.kt)("p",{parentName:"admonition"},"Let's walk through the client-side JS in more detail."),(0,i.kt)("h3",{parentName:"admonition",id:"imports"},"Imports"),(0,i.kt)("p",{parentName:"admonition"},"First, we are importing the ",(0,i.kt)("inlineCode",{parentName:"p"},"NProgress")," library which is used to show a progress bar when the page is loading. We are\nalso importing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Socket")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"LiveSocket")," classes from the ",(0,i.kt)("inlineCode",{parentName:"p"},"phoenix")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"phoenix_live_view")," libraries along with the\n",(0,i.kt)("inlineCode",{parentName:"p"},"phoenix_html")," library."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import NProgress from "nprogress";\nimport { Socket } from "phoenix";\nimport "phoenix_html";\nimport { LiveSocket } from "phoenix_live_view";\n...\n')),(0,i.kt)("h3",{parentName:"admonition",id:"liveview-websocket-route"},"LiveView Websocket Route"),(0,i.kt)("p",{parentName:"admonition"},"Next, we define the route that websockets will use to connect to your server. All websockets will be routed through this\nURL. From there, ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," uses the page URL to determine which LiveView to route the connection to. If you change\nthis URL, you will need to change the server-side code that handles the websocket connection."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'...\n// Define the route that websockets will use to connect to your server\nconst url = "/live";\n...\n')),(0,i.kt)("h3",{parentName:"admonition",id:"csrf-token"},"CSRF Token"),(0,i.kt)("p",{parentName:"admonition"},"Next, we pull out the CSRF token from the meta tag. This is used to authenticate the websocket connection."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'...\n// Pull out the csrf token from the meta tag\nlet csrfToken = document.querySelector("meta[name=\'csrf-token\']").getAttribute("content");\n...\n')),(0,i.kt)("h3",{parentName:"admonition",id:"create-the-livesocket"},"Create the LiveSocket"),(0,i.kt)("p",{parentName:"admonition"},"Then, we create the LiveSocket. This is the object that handles the websocket connection and all the LiveView logic. We\npass in the ",(0,i.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Socket"),", and any other options we want to configure the LiveSocket with."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"...\n// Create the LiveSocket\nlet liveSocket = new LiveSocket(url, Socket, { params: { _csrf_token: csrfToken } });\n...\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bindingPrefix"),' - the prefix to use for phoenix bindings. Defaults "phx-"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - the connect_params to pass to the view's mount callback. May be a literal object or closure returning an\nobject. When a closure is provided, the function receives the view's element."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hooks")," \u2013 a reference to a user-defined hooks namespace, containing client callbacks for server/client interop. (We'll\ncover Hooks in a later section)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uploaders")," \u2013 a reference to a user-defined uploaders namespace, containing client callbacks for client-side\ndirect-to-cloud uploads. (LiveViewJS currently does not support user-defined uploaders but we plan to add this in the\nfuture) :::")),(0,i.kt)("h3",{id:"progress-bar"},"Progress Bar"),(0,i.kt)("p",null,"Next, we add event listeners to show a progress bar when the page is loading. This requires the ",(0,i.kt)("inlineCode",{parentName:"p"},"NProgress")," library and\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"NProgress")," css."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'...\n// Show progress bar on live navigation and form submits (requires NProgress css)\nwindow.addEventListener("phx:page-loading-start", (info) => NProgress.start());\nwindow.addEventListener("phx:page-loading-stop", (info) => NProgress.done());\n...\n')),(0,i.kt)("p",null,"You could swap NPorgress out for any other progress bar library you want like\n",(0,i.kt)("a",{parentName:"p",href:"http://buunguyen.github.io/topbar/"},"topbar"),". If you did that you would have to update the event listeners to match the\nevents that your progress bar library uses."),(0,i.kt)("h3",{id:"connect-to-the-livesocket"},"Connect to the LiveSocket"),(0,i.kt)("p",null,"Lastly, we connect to the LiveSocket. This will connect to the websocket and start the LiveView process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"...\n// connect if there are any LiveViews on the page\nliveSocket.connect();\n...\n// add the liveSocket to the window\n(window as any).liveSocket = liveSocket;\n")),(0,i.kt)("h3",{id:"debugging-and-latency-simulation"},"Debugging and Latency Simulation"),(0,i.kt)("p",null,"There are a couple of lines that are commented out by default. If you want to expose liveSocket messages in the console\nfor debugging or turn on latency simulation, you can uncomment the following lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"...\n// liveSocket.enableDebug();\n// liveSocket.enableLatencySim(1000)\n...\n")),(0,i.kt)("h3",{id:"default-client-side-js-is-good-start"},"Default client-side JS is good start"),(0,i.kt)("p",null,"For the most part, you shouldn't need to change the client-side JS especially at first. As you build more LiveViews you\nmight run into a need to do some more client-side DOM manipulation or handle events pushed from the server. In these\ncases, you may need to add what is called a \"Hook\". We'll cover Hooks in the next section."),(0,i.kt)("admonition",{title:'LiveView "Hooks" are a completely different concept from "Hooks" in React. LiveView Hooks are a way to add',type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"custom client-side logic to your LiveView. Unfortunately, sometimes naming conflicts like this happen. Just remember\nthat LiveView Hooks are not the same as React Hooks. :::")))}d.isMDXComponent=!0}}]);