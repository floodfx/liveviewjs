"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[9563],{876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(n),u=i,v=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(v,a(a({ref:t},d),{},{components:n})):r.createElement(v,a({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7896),i=(n(2784),n(876));const o={sidebar_position:3},a="LiveView API - `render`",c={unversionedId:"anatomy-of-a-liveview/render-details",id:"anatomy-of-a-liveview/render-details",title:"LiveView API - `render`",description:"render is responsible for taking the context (i.e., state) of the LiveView and generating the HTML/CSS for the",source:"@site/docs/03-anatomy-of-a-liveview/render-details.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/render-details",permalink:"/docs/anatomy-of-a-liveview/render-details",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"LiveView API - `mount`",permalink:"/docs/anatomy-of-a-liveview/mount-details"},next:{title:"LiveView API - `handleEvent`",permalink:"/docs/anatomy-of-a-liveview/handle-event-details"}},s={},l=[{value:"<code>render</code> Signature",id:"render-signature",level:2}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveview-api---render"},"LiveView API - ",(0,i.kt)("inlineCode",{parentName:"h1"},"render")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"render")," is responsible for taking the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," (i.e., state) of the LiveView and generating the HTML/CSS for the\nclient. The ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," framework automatically passes the current ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," of the LiveView into ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," along with\n",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," data (things like the csrfToken, page url, etc.). It uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"html")," method to generate the HTML/CSS for the\nclient."),(0,i.kt)("h2",{id:"render-signature"},(0,i.kt)("inlineCode",{parentName:"h2"},"render")," Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"render(context: TContext, meta: LiveViewMeta<TEvents>): LiveViewTemplate | Promise<LiveViewTemplate>;\n")),(0,i.kt)("p",null,"The example ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," function below takes the ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," from the context and renders the HTML/CSS for the client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counterLiveView.ts" {25-35}',title:'"counterLiveView.ts"',"{25-35}":!0},'import { createLiveView, html } from "liveviewjs";\n/**\n * A basic counter that increments and decrements a number.\n */\nexport const counterLiveView = createLiveView<\n  { count: number }, // Define LiveView Context / State\n  { type: "increment" } | { type: "decrement" } // Define LiveView Events\n>({\n  // Setup / initialize the LiveView Context (i.e.,  set count to 0)\n  mount: (socket) => {\n    socket.assign({ count: 0 });\n  },\n  // Handle incoming increment and decrement events from User input\n  handleEvent: (event, socket) => {\n    const { count } = socket.context;\n    switch (event.type) {\n      case "increment":\n        socket.assign({ count: count + 1 });\n        break;\n      case "decrement":\n        socket.assign({ count: count - 1 });\n        break;\n    }\n  },\n  // Renders the Counter View based on the current Context / State\n  render: (context) => {\n    const { count } = context;\n    return html`\n      <div>\n        <h1>Count is: ${count}</h1>\n        <button phx-click="decrement">-</button>\n        <button phx-click="increment">+</button>\n      </div>\n    `;\n  },\n});\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"You might have noticed the ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"phx-click")," attributes present in the ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"<button>")," elements in the example above. These"),(0,i.kt)("p",{parentName:"admonition"},'are examples of attributes (a.k.a "bindings") that are added to HTML elements that initiate server events based on user\ninteraction. There are four main types of bindings: click, form, key, focus/blur. We will cover them in more detail\nin the ',(0,i.kt)("a",{parentName:"p",href:"/docs/user-events-slash-bindings/overview"},"section on User Events"),". :::")))}p.isMDXComponent=!0}}]);