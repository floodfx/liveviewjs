"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[5727],{876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(t),f=r,h=u["".concat(l,".").concat(f)]||u[f]||c[f]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=t(7896),r=(t(2784),t(876));const o={sidebar_position:6},i="LiveView API - `handleInfo`",s={unversionedId:"anatomy-of-a-liveview/handle-info",id:"anatomy-of-a-liveview/handle-info",title:"LiveView API - `handleInfo`",description:"handleInfo is how server-side events (a.k.a Info) are handled.  These server-side events are initiated by processes that are happening on the server for example: database updates, background jobs, pub/sub messages, or some other asynchronous process. Just like handleEvent and handleParams, handleInfo is automatically passed the info event (i.e. server event) along with the socket and can use it to manipulate the context of the LiveView or otherwise respond to the info messages it receives.",source:"@site/docs/03-anatomy-of-a-liveview/handle-info.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/handle-info",permalink:"/docs/anatomy-of-a-liveview/handle-info",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"LiveView API - `handleParams`",permalink:"/docs/anatomy-of-a-liveview/handle-params"},next:{title:"User Initiated Event with `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info-user-initiated"}},l={},d=[{value:"<code>handleInfo</code> Signature",id:"handleinfo-signature",level:2},{value:"<code>handleInfo</code> Use Cases",id:"handleinfo-use-cases",level:2}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"liveview-api---handleinfo"},"LiveView API - ",(0,r.kt)("inlineCode",{parentName:"h1"},"handleInfo")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"handleInfo")," is how server-side events (a.k.a ",(0,r.kt)("inlineCode",{parentName:"p"},"Info"),") are handled.  These server-side events are initiated by processes that are happening on the server for example: database updates, background jobs, pub/sub messages, or some other asynchronous process. Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"handleEvent")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"handleParams"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"handleInfo")," is automatically passed the ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," event (i.e. server event) along with the ",(0,r.kt)("inlineCode",{parentName:"p"},"socket")," and can use it to manipulate the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," of the LiveView or otherwise respond to the ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," messages it receives."),(0,r.kt)("h2",{id:"handleinfo-signature"},(0,r.kt)("inlineCode",{parentName:"h2"},"handleInfo")," Signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"handleInfo(info: TInfos, socket: LiveViewSocket<TContext, TInfos>): void | Promise<void>;\n")),(0,r.kt)("h2",{id:"handleinfo-use-cases"},(0,r.kt)("inlineCode",{parentName:"h2"},"handleInfo")," Use Cases"),(0,r.kt)("p",null,"There are three main use cases for ",(0,r.kt)("inlineCode",{parentName:"p"},"handleInfo"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Handling a asyncrhonous process initiated from a user event without blocking the UI"),(0,r.kt)("li",{parentName:"ul"},"Handling a asyncrhonous process initiated from a background process"),(0,r.kt)("li",{parentName:"ul"},"Handling a pub/sub message")))}c.isMDXComponent=!0}}]);