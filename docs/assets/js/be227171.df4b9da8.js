"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[6300],{876:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),h=d(t),c=i,u=h["".concat(p,".").concat(c)]||h[c]||s[c]||r;return t?a.createElement(u,o(o({ref:n},m),{},{components:t})):a.createElement(u,o({ref:n},m))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(7896),i=(t(2784),t(876));const r={sidebar_position:5},o="LiveView API - `handleParams`",l={unversionedId:"anatomy-of-a-liveview/handle-params",id:"anatomy-of-a-liveview/handle-params",title:"LiveView API - `handleParams`",description:"Let's explore the handleParams method. Since the previous example (counterLiveView) did not use handleParams,",source:"@site/docs/03-anatomy-of-a-liveview/handle-params.md",sourceDirName:"03-anatomy-of-a-liveview",slug:"/anatomy-of-a-liveview/handle-params",permalink:"/docs/anatomy-of-a-liveview/handle-params",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"LiveView API - `handleEvent`",permalink:"/docs/anatomy-of-a-liveview/handle-event-details"},next:{title:"LiveView API - `handleInfo`",permalink:"/docs/anatomy-of-a-liveview/handle-info"}},p={},d=[{value:"Example Renders",id:"example-renders",level:2},{value:"<code>handleParams</code> Method",id:"handleparams-method",level:2}],m={toc:d};function s(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liveview-api---handleparams"},"LiveView API - ",(0,i.kt)("inlineCode",{parentName:"h1"},"handleParams")),(0,i.kt)("p",null,"Let's explore the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method. Since the previous example (",(0,i.kt)("inlineCode",{parentName:"p"},"counterLiveView"),") did not use ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams"),",\nwe'll define ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView.ts")," and explore the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," method with it. As you can see below, ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView.ts"),"\ndefines ",(0,i.kt)("inlineCode",{parentName:"p"},"mount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="helloLiveView.ts"',title:'"helloLiveView.ts"'},'export const helloLiveView = createLiveView({\n  mount: (socket) => {\n    socket.assign({ name: "World" });\n  },\n  handleParams(url, socket) {\n    const name = url.searchParams.get("name") || "World";\n    socket.assign({ name });\n  },\n  render: (context) => html`Hello ${context.name}!`,\n});\n')),(0,i.kt)("p",null,"In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView"),", we are using ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," to update the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),"\nquery parameter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),". If there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," query parameter, we default to ",(0,i.kt)("inlineCode",{parentName:"p"},"World"),"."),(0,i.kt)("h2",{id:"example-renders"},"Example Renders"),(0,i.kt)("p",null,"Let's say you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"helloLiveView")," routed to ",(0,i.kt)("inlineCode",{parentName:"p"},"/hello"),". Visiting the following paths would result in the following\nrenders:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello World!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS&foo=bar")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/hello?name=LiveViewJS#blah")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Hello LiveViewJS!"))),(0,i.kt)("h2",{id:"handleparams-method"},(0,i.kt)("inlineCode",{parentName:"h2"},"handleParams")," Method"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," is automatically called by ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," on the initial load of a LiveView, as well as anytime the URL of\nthe LiveView changes. ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," allows developers to access the full ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," of the LiveView including the ",(0,i.kt)("inlineCode",{parentName:"p"},"host"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"path"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hash"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pathname"),", etc, and then update the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"socket")," or otherwise respond to data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),"."),(0,i.kt)("admonition",{title:"Worth noting that the http server (e.g.,  express or oak) handles the routing of the browser to this LiveView. This",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"means that changes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"handleParams")," are typically search parameters or hash changes. Changing the host\nand/or path of a URL will typically mean the server routes you to a different LiveView (if one exists at that host and\npath). :::"),(0,i.kt)("h2",{parentName:"admonition",id:"handleparams-signature"},(0,i.kt)("inlineCode",{parentName:"h2"},"handleParams")," Signature"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"handleParams(url: URL, socket: LiveViewSocket<TContext, TInfos>): void | Promise<void>;\n"))),(0,i.kt)("p",null,"object. See the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/URL"},"MDN URL documentation")," for more information. :::"))}s.isMDXComponent=!0}}]);