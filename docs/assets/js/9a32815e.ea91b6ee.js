"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[5548],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),v=i,w=d["".concat(s,".").concat(v)]||d[v]||p[v]||o;return n?r.createElement(w,a(a({ref:t},c),{},{components:n})):r.createElement(w,a({ref:t},c))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7896),i=(n(2784),n(876));const o={sidebar_position:5},a="Deno - Build a LiveView",l={unversionedId:"quick-starts/deno-build-first-liveview",id:"quick-starts/deno-build-first-liveview",title:"Deno - Build a LiveView",description:"Since you've already downloaded the LiveViewJS repo, it should be easy to create a new",source:"@site/docs/02-quick-starts/deno-build-first-liveview.md",sourceDirName:"02-quick-starts",slug:"/quick-starts/deno-build-first-liveview",permalink:"/docs/quick-starts/deno-build-first-liveview",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Deno - Run the Examples",permalink:"/docs/quick-starts/deno-run-examples"},next:{title:"Anatomy of a LiveView",permalink:"/docs/category/anatomy-of-a-liveview"}},s={},u=[{value:"Create a new LiveView in Deno",id:"create-a-new-liveview-in-deno",level:2},{value:"Setup a new Route",id:"setup-a-new-route",level:2},{value:"Start the Oak Server",id:"start-the-oak-server",level:2},{value:"See the LiveView in Action",id:"see-the-liveview-in-action",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Great start!",id:"great-start",level:2}],c={toc:u};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deno---build-a-liveview"},"Deno - Build a LiveView"),(0,i.kt)("p",null,"Since you've already ",(0,i.kt)("a",{parentName:"p",href:"get-liveviewjs-repo"},"downloaded the ",(0,i.kt)("strong",{parentName:"a"},"LiveViewJS")," repo"),", it should be easy to create a new\nLiveView and add it to your webserver. Let's get started!"),(0,i.kt)("h2",{id:"create-a-new-liveview-in-deno"},"Create a new LiveView in Deno"),(0,i.kt)("p",null,"Since we are using Deno to serve our LiveViews, we'll create a new LiveView in the ",(0,i.kt)("inlineCode",{parentName:"p"},"packages/deno")," directory."),(0,i.kt)("p",null,"Use your favorite editor to create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"packages/deno/src/example/liveview/hello.ts")," and add the following code\nand hit save:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { createLiveView, html } from "liveviewjs";\n\nexport const helloLiveView = createLiveView({\n  render: () => html`Hello World!`,\n});\n')),(0,i.kt)("p",null,"Congratulations! You've just created your first LiveView! It doesn't do much yet but let's get it running in the\nbrowser."),(0,i.kt)("h2",{id:"setup-a-new-route"},"Setup a new Route"),(0,i.kt)("p",null,"Let's add a route to this LiveView to see it in our browser. Edit ",(0,i.kt)("inlineCode",{parentName:"p"},"packages/deno/src/example/index.ts")," and make\nthe following highlighted changes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/deno/src/example/index.ts" {3,7}',title:'"packages/deno/src/example/index.ts"',"{3,7}":!0},'...\nimport { pageRenderer, rootRenderer } from "./liveViewRenderers.ts";\nimport { helloLiveView } from "./liveviews/hello.ts";\n\n// map request paths to LiveViews\nconst lvRouter: LiveViewRouter = {\n  "/hello": helloLiveView,\n  "/autocomplete": autocompleteLiveView,\n...\n')),(0,i.kt)("p",null,"Great! We've now setup our new LiveView to be served at the ",(0,i.kt)("inlineCode",{parentName:"p"},"/hello")," path. Let's start the server and see it in action."),(0,i.kt)("h2",{id:"start-the-oak-server"},"Start the Oak Server"),(0,i.kt)("p",null,"Start up the Oak server in Deno:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# start oak server\ndeno run --allow-net --allow-read --allow-write --allow-env --import-map=import_map.json src/example/index.ts\n")),(0,i.kt)("h2",{id:"see-the-liveview-in-action"},"See the LiveView in Action"),(0,i.kt)("p",null,"Point your browser to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:9001/hello"},"http://localhost:9001/hello")," and you should see something like the\nfollowing: ",(0,i.kt)("img",{alt:"LiveViewJS Hello World Screenshot",src:n(8043).Z,width:"1630",height:"632"})),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"Ok we got our first LiveView running but it isn't very interactive. Let's make it more interesting by adding a button\nthat toggles between using text and emojis to say hello. Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.ts")," file to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="packages/deno/src/example/liveview/hello.ts"',title:'"packages/deno/src/example/liveview/hello.ts"'},'import { createLiveView, html } from "liveviewjs";\n\nexport const helloLiveView = createLiveView({\n  mount: (socket) => {\n    socket.assign({ useEmoji: false });\n  },\n  handleEvent(event, socket) {\n    socket.assign({ useEmoji: !socket.context.useEmoji });\n  },\n  render: (context) => {\n    const msg = context.useEmoji ? "\ud83d\udc4b \ud83c\udf0e" : "Hello World";\n    return html`\n      ${msg}\n      <br />\n      <button phx-click="toggle">Toggle Message</button>\n    `;\n  },\n});\n')),(0,i.kt)("p",null,"Stop the Deno server and run the same command again to start the server."),(0,i.kt)("p",null,"Now, when you refresh the page, you should see a button that toggles between using text and emojis to say hello. It\nshould look something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LiveViewJS Hello World Recording",src:n(4556).Z,width:"1630",height:"630"})),(0,i.kt)("h2",{id:"great-start"},"Great start!"),(0,i.kt)("p",null,"You've just created your first LiveView and added it to your webserver! There is a lot more to learn about\n",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS"),", but you are well on your way. We recommend you continue to the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/category/anatomy-of-a-liveview"},"Anatomy of a LiveView")," section to start to learn more about how LiveViews work."))}p.isMDXComponent=!0},8043:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/liveviewjs_hello_liveview_deno-0f12c470d6af8952a736434974b93bfd.png"},4556:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/liveviewjs_hello_toggle_liveview_deno_rec-6770b13c7109764fe416a368f712f377.gif"}}]);