"use strict";(self.webpackChunkliveviewjs_com=self.webpackChunkliveviewjs_com||[]).push([[1440],{876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},w={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),v=p(r),u=i,d=v["".concat(l,".").concat(u)]||v[u]||w[u]||o;return r?n.createElement(d,a(a({ref:t},c),{},{components:r})):n.createElement(d,a({ref:t},c))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},4640:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>w,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7896),i=(r(2784),r(876));const o={sidebar_position:1},a="Webserver Integration",s={unversionedId:"webserver-integration/overview",id:"webserver-integration/overview",title:"Webserver Integration",description:"Out of the box, LiveViewJS supports two webserver integrations:",source:"@site/docs/12-webserver-integration/overview.md",sourceDirName:"12-webserver-integration",slug:"/webserver-integration/overview",permalink:"/docs/webserver-integration/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Webserver Integrations",permalink:"/docs/category/webserver-integrations"},next:{title:"LiveViewServerAdaptor",permalink:"/docs/webserver-integration/liveview-server-adaptor"}},l={},p=[{value:"How the Integration Works",id:"how-the-integration-works",level:2},{value:"Recap of the Integration Points",id:"recap-of-the-integration-points",level:2}],c={toc:p};function w(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"webserver-integration"},"Webserver Integration"),(0,i.kt)("p",null,"Out of the box, ",(0,i.kt)("strong",{parentName:"p"},"LiveViewJS")," supports two webserver integrations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ExpressJS (NodeJS)"),(0,i.kt)("li",{parentName:"ul"},"Oak (Deno)")),(0,i.kt)("p",null,"Both integrations are very similar and are based on the same core API and intgration points between the webserver and\nthe LiveViewJS library."),(0,i.kt)("h2",{id:"how-the-integration-works"},"How the Integration Works"),(0,i.kt)("p",null,'As we\'ve covered elsewhere, LiveViewJS handles both HTTP and Websocket connections for routes that are registered with\nit. It does this by providing "middleware" (for HTTP and websocket traffic) that is plugged into the webserver.'),(0,i.kt)("p",null,"This middleware knows how to handle the HTTP and websocket traffic for the routes that are registered with LiveViewJS."),(0,i.kt)("p",null,"Let's look at an example of how this works in ExpressJS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// create our express app\nconst app = express();\n...\n// whatever other express setup you need to do\n...\n// setup our LiveViewJS routes\nconst router: LiveViewRouter = {\n  ...\n  "/hello": helloLiveView,\n  ...\n};\n...\n// initialize the NodeJS LiveViewServer\nconst liveView = new NodeExpressLiveViewServer(\n  router,\n  htmlPageTemplate, // HTML template for all liveviews\n  { title: "Express Demo", suffix: " \xb7 LiveViewJS" }, // live tag options\n);\n\n// setup the LiveViewJS HTTP middleware\napp.use(liveView.httpMiddleware());\n\n\n// configure express to handle both http and websocket requests\nconst httpServer = new Server();\nconst wsServer = new WebSocketServer({\n  server: httpServer,\n});\n\n// send http requests to the express app\nhttpServer.on("request", app);\n\n// setup the LiveViewJS websocket middleware\nconst liveViewWsMiddleware = liveView.wsMiddleware();\nliveViewWsMiddleware(wsServer);\n...\n')),(0,i.kt)("h2",{id:"recap-of-the-integration-points"},"Recap of the Integration Points"),(0,i.kt)("p",null,"Essentially, we do some LiveViewJS configuration, then we plug the LiveViewJS middleware into the webserver and\nwebsocket server."),(0,i.kt)("p",null,"When traffic comes in, the webserver will pass the request to the LiveViewJS middleware. The middleware checks if the\nrequest is for a LiveViewJS route. If it is, it will handle the request. If it isn't, it will pass the request to the\nnext middleware in the chain."),(0,i.kt)("p",null,"Let's look at the integration points in more detail in the next sections."))}w.isMDXComponent=!0}}]);